@using PPDIS.Shared.Models
@inject HttpClient Http
@inject DialogService DialogService
@inject NotificationService NotificationService


<h3 class="mb-4 text-center">
    @(string.IsNullOrWhiteSpace(stockCard.Id) ? "📝 Add Stock Card" : "✏️ Edit Stock Card")
</h3>

<div class="font-name">
    <EditForm Model="@stockCard" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />


        <!-- 🧾 Purchase Request -->
        <div class="hover-up">
            <div class="entry-name mt-4 mb-0">
                <h5>Purchase Request</h5>
            </div>
            <div class="entry-purchase-order mt-0 mb-4">
                <div class="row mb-3">
                    <div class="col-md-6 entry-input-title">
                        <label class="form-label">Purchase Request:</label>
                        <InputText class="form-control custom-input" @bind-Value="stockCard.pr_number" />
                    </div>
                    <div class="col-md-6 entry-input-title">
                        <label class="form-label">Date:</label>
                        <InputText class="form-control custom-input" @bind-Value="stockCard.pr_date" />
                    </div>
                </div>
                <div class="entry-input-title">
                    <label class="form-label">Purchase Request Supply:</label>
                </div>
                @foreach (var supply in stockCard.list_supplies_pr)
                {
                    <div class="card mb-2 p-3 shadow-sm">
                        <div class="row align-items-center justify-content-between">
                            <div class="col-md-2">
                                <label class="form-label">Unit</label>
                                <InputText class="form-control custom-input" @bind-Value="supply.unit" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Description</label>
                                <InputTextArea class="form-control custom-input font-monospace"
                                               @bind-Value="supply.description" /> <!--rows="5"-->
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Unit Cost</label>
                                <InputNumber class="form-control custom-input"
                                             @oninput="() => OnValueChanged(supply)"
                                             @bind-Value="supply.unitcost"
                                              />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Quantity</label>
                                <InputNumber class="form-control custom-input"
                                             Value="supply.quantity"
                                             ValueChanged="@((decimal? val) => OnQuantityChanged(supply, val))"
                                             ValueExpression="() => supply.quantity"
                                             @oninput="EventCallback.Factory.CreateBinder<decimal?>(this, val => OnQuantityChanged(supply, val), supply.quantity)" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Total</label>
                                <InputNumber class="form-control custom-input"
                                             @bind-Value="supply.totalcost"
                                             ReadOnly="true" />
                            </div>
                            <div class="col-md-1">
                                <label class="form-label">&nbsp;</label>
                                <button class="btn btn-sm btn-danger w-100"
                                        type="button"
                                        @onclick="@(() => RemovePrSupply(supply))">
                                    🗑
                                </button>
                            </div>
                        </div>
                    </div>
                }
                <div class="d-flex justify-content-start">
                    <button class="btn btn-sm entry-add-button mt-2 mb-2" type="button" @onclick="AddPrSupply">Add PR Supply</button>
                </div>
            </div>
        </div>

        <!-- 📑 Quotation -->
        <div class="entry-name mt-4 mb-0">
                <h5>Quotations</h5>
            </div>
        <div class="entry-purchase-order mb-4">
            <div class="row mb-3">
                <div class="col-md-4 entry-input-title">
                    <label class="form-label">Purchase Request:</label>
                    <InputText class="form-control custom-input" @bind-Value="stockCard.pr_number" disabled />
                </div>
                <div class="col-md-4 entry-input-title">
                    <label class="form-label">Date:</label>
                    <InputText class="form-control custom-input" @bind-Value="stockCard.pr_date" disabled />
                </div>
                <div class="col-md-4 entry-input-title">
                    <label class="form-label">Canvass Number:</label>
                    <InputText class="form-control custom-input" @bind-Value="stockCard.canvass_no" />
                </div>
            </div>
            @foreach (var quote in stockCard.list_supplies_qu)
            {
                <div class="card p-3 mb-2 shadow-sm">
                    <div class="row align-items-center">
                        <div class="col-md-2">
                            <label class="form-label">Unit</label>
                            <InputText class="form-control" @bind-Value="quote.unit" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Description</label>
                            <InputText class="form-control" @bind-Value="quote.description" />
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Quantity</label>
                            <InputNumber class="form-control" @bind-Value="quote.quantity" />
                        </div>
                        <div class="col-md-1">
                            <label class="form-label">&nbsp;</label>
                            <button class="btn btn-sm btn-danger w-100" type="button" @onclick="@(() => RemoveQuSupply(quote))">🗑</button>
                        </div>
                    </div>
                </div>
            }
            <div class="d-flex justify-content-start">
                <button class="btn btn-sm entry-add-button mt-2 mb-2" type="button" @onclick="AddQuSupply">Add Quotations</button>
            </div>
        </div>

        <!-- 📦 PO Groups -->
        <div class="entry-name mt-4 mb-0">
            <h5>Purchase Order</h5>
        </div>
        <div class="entry-purchase-order mb-4">
            @foreach (var group in stockCard.list_supplies_po)
            {
                <div class="card mb-3 p-3 border-start border-4 border-info">
                    <h6 class="text-info">Supplier: @group.Supplier</h6>
                    <div class="row mb-2">
                        <div class="col-md-4">
                            <label class="form-label">Supplier</label>
                            <InputText class="form-control" @bind-Value="group.Supplier" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Address</label>
                            <InputText class="form-control" @bind-Value="group.Address" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">TIN</label>
                            <InputText class="form-control" @bind-Value="group.TIN" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Mode</label>
                            <InputText class="form-control" @bind-Value="group.ProcurementMode" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Po Number</label>
                            <InputText class="form-control" @bind-Value="group.PONumber" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Po Date</label>
                            <InputText class="form-control" @bind-Value="group.PODate" />
                        </div>
                    </div>

                    @foreach (var item in group.Supplies)
                    {
                        <div class="row mb-2 align-items-center">
                            <div class="col-md-2">
                                <label class="form-label">Unit</label>
                                <InputText class="form-control" @bind-Value="item.unit" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Description</label>
                                <InputText class="form-control" @bind-Value="item.description" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Quantity</label>
                                <InputNumber class="form-control" @bind-Value="item.quantity" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Unit Cost</label>
                                <InputNumber class="form-control" @bind-Value="item.unitcost" />
                            </div>
                            <div class="col-md-1">
                                <label class="form-label">Total</label>
                                <InputNumber class="form-control" @bind-Value="item.totalcost" />
                            </div>
                            <div class="col-md-1">
                                <label class="form-label">&nbsp;</label>
                                <button class="btn btn-sm btn-danger w-100" type="button" @onclick="@(() => RemoveSupplyFromPoGroup(group, item))">🗑</button>
                            </div>
                        </div>
                    }

                    <button class="btn btn-sm btn-outline-info mt-2" type="button" @onclick="@(() => AddSupplyToPoGroup(group))">➕ Add PO Supply</button>
                </div>
            }
            <div class="d-flex justify-content-start">
                <button class="btn btn-sm entry-add-button mt-2 mb-2" type="button" @onclick="AddPoGroup">Add PO Group</button>
            </div>
        </div>


        <!-- 🕵️ INS Groups -->
        <div class="entry-name mt-4 mb-0">
            <h5>Inspection Groups</h5>
        </div>
        <div class="entry-purchase-order mb-4">
            @foreach (var insGroup in stockCard.list_supplies_ins)
            {
                <div class="card p-3 mb-3 border-start border-success border-4">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label">Inspection Number</label>
                            <InputText class="form-control" @bind-Value="insGroup.InspectionNumber" />
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Inspection Date</label>
                            <InputText class="form-control" @bind-Value="insGroup.InspectionDate" />
                        </div>
                    </div>

                    @foreach (var ins in insGroup.Ins)
                    {
                        <div class="row mb-2 align-items-center">
                            <div class="col-md-2">
                                <label class="form-label">Unit</label>
                                <InputText class="form-control" @bind-Value="ins.unit" />
                            </div>
                            <div class="col-md-4">
                                <label class="form-label">Description</label>
                                <InputText class="form-control" @bind-Value="ins.description" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Quantity</label>
                                <InputNumber class="form-control" @bind-Value="ins.quantity" />
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Unit Cost</label>
                                <InputNumber class="form-control" @bind-Value="ins.unitcost" />
                            </div>
                            <div class="col-md-1">
                                <label class="form-label">Total</label>
                                <InputNumber class="form-control" @bind-Value="ins.totalcost" />
                            </div>
                            <div class="col-md-1">
                                <label class="form-label">&nbsp;</label>
                                <button class="btn btn-sm btn-danger w-100" type="button" @onclick="@(() => RemoveInsSupply(insGroup, ins))">🗑</button>
                            </div>
                        </div>
                    }
                    <button class="btn btn-sm btn-outline-success mt-2" type="button" @onclick="@(() => AddSupplyToInsGroup(insGroup))">➕ Add INS Supply</button>
                </div>
            }
            <div class="d-flex justify-content-start">
                <button class="btn btn-sm entry-add-button mt-2 mb-2" type="button" @onclick="AddInsGroup">Add PO Group</button>
            </div>
        </div>

        <!-- ✅ Submit -->
        <div class="mt-4 text-center">
            <button type="submit" class="btn btn-primary btn-lg px-5 shadow-sm" style="border-radius: 12px; transition: all 0.2s;">
                💾 @(string.IsNullOrWhiteSpace(stockCard.Id) ? "Save Stock Card" : "Update Stock Card")
            </button>
        </div>

    </EditForm>
</div>

@code {
    [Parameter] public StockCardData stockCard { get; set; } = new();
    [Parameter] public EventCallback OnFormSubmitted { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        // Only auto-generate values if new record
        if (string.IsNullOrWhiteSpace(stockCard.Id))
        {
            Console.WriteLine($"[Add] StockCard Id before dialog bag o ni");
            var now = DateTime.Now;
            string yearMonth = now.ToString("yyyy-MM");

            var stock_list = await Http.GetFromJsonAsync<List<StockCardData>>("api/Task/ViewStock") ?? new();

            int maxNumber = 0;
            foreach (var stock in stock_list)
            {
                if (!string.IsNullOrWhiteSpace(stock.tracking) && stock.tracking.StartsWith(yearMonth))
                {
                    string numberPart = stock.tracking.Substring(8, 4);
                    if (int.TryParse(numberPart, out int num) && num > maxNumber)
                        maxNumber = num;
                }
            }

            int newNumber = maxNumber + 1;
            stockCard.tracking = $"{yearMonth}-{newNumber:D4}";
            stockCard.pr_number = $"{yearMonth}-{newNumber:D4}";
            stockCard.pr_date = now.ToString("yyyy-MM-dd");
        }
    }

    private void OnValueChanged(PrSuppliesClass supply)
    {
        supply.totalcost = (supply.quantity ?? 0) * (supply.unitcost ?? 0);

        var matchingQuote = stockCard.list_supplies_qu
            .FirstOrDefault(q => q.Id == supply.Id);
        if (matchingQuote != null)
        {
            matchingQuote.unit = supply.unit;
            matchingQuote.description = supply.description;
            matchingQuote.quantity = supply.quantity;
        }
    }

    private void OnQuantityChanged(PrSuppliesClass supply, decimal? newValue)
    {
        supply.quantity = newValue;
        supply.totalcost = (supply.quantity ?? 0) * (supply.unitcost ?? 0);
    }


    private async Task HandleValidSubmit()
    {
        HttpResponseMessage response;

        if (string.IsNullOrWhiteSpace(stockCard.Id))
        {
            // Insert
            response = await Http.PostAsJsonAsync("api/Task/InsertStock", stockCard);
        }
        else
        {
            // Update
            response = await Http.PutAsJsonAsync($"api/Task/UpdateStock/{stockCard.Id}",stockCard);


        }

        if (response.IsSuccessStatusCode)
        {
            await OnFormSubmitted.InvokeAsync();
            DialogService.Close();
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Success",
                Detail = string.IsNullOrWhiteSpace(stockCard.Id) ?
                    "Stock card saved successfully!" :
                    "Stock card updated successfully!",
                Duration = 6000
            });
        }
        else
        {
            var errorDetails = await response.Content.ReadAsStringAsync();
            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "Error",
                Detail = $"Failed to update. Server says: {errorDetails}",
                Duration = 6000
            });
        }
    }

    void AddPrSupply() => stockCard.list_supplies_pr.Add(new PrSuppliesClass());
    void RemovePrSupply(PrSuppliesClass supply) => stockCard.list_supplies_pr.Remove(supply);

    private void AddQuSupply()
    {
        foreach (var pr in stockCard.list_supplies_pr)
        {
            stockCard.list_supplies_qu.Add(new QuSuppliesClass
            {
                Id = pr.Id,
                unit = pr.unit,
                description = pr.description,
                quantity = pr.quantity
            });
        }
    }

    void RemoveQuSupply(QuSuppliesClass supply) => stockCard.list_supplies_qu.Remove(supply);

    void AddPoGroup() => stockCard.list_supplies_po.Add(new ListSuppliesGroupPo
    {
        Supplies = new List<SuppliesClass> { new SuppliesClass() }
    });
    void AddSupplyToPoGroup(ListSuppliesGroupPo group) => group.Supplies.Add(new SuppliesClass());
    void RemoveSupplyFromPoGroup(ListSuppliesGroupPo group, SuppliesClass item) => group.Supplies.Remove(item);

    void AddInsGroup() => stockCard.list_supplies_ins.Add(new ListSuppliesGroupIns
    {
        Ins = new List<InsSuppliesClass> { new InsSuppliesClass() }
    });
    void AddSupplyToInsGroup(ListSuppliesGroupIns group) => group.Ins.Add(new InsSuppliesClass());
    void RemoveInsSupply(ListSuppliesGroupIns group, InsSuppliesClass item) => group.Ins.Remove(item);
}
