@page "/Validator/"
@using System.Text.Json
<style>
    .start-54 {
        left: 54% !important;
    }

    .top-neg-5 {
        top: -5px;
    }

    .sticky-bottom {
        position: fixed;
        bottom: 0;
        left: 0;
        background-color: #f0f0f0; /* Change this to your desired background color */
        padding: 10px; /* Adjust the padding as needed */
        width: 100vw;
    }
</style>

<style>

    #overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.5);
        background: linear-gradient(0deg, rgba(255, 255, 255, 1), rgba(1, 1, 1, 1));
        justify-content: center;
        align-items: center;
        text-align: center;
        color: white;
    }

    #myVideo {
        position: fixed;
        right: 0;
        bottom: 0;
        min-width: 100%;
        min-height: 100%;
    }

</style>

<div id="overlay">
    <div style="bottom:0;position:absolute;width:100%;margin-top:10px; z-index:1">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320"><path fill="#0099ff" fill-opacity="1" d="M0,64L48,101.3C96,139,192,213,288,245.3C384,277,480,267,576,240C672,213,768,171,864,176C960,181,1056,235,1152,250.7C1248,267,1344,245,1392,234.7L1440,224L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z"></path></svg>
    </div>
    <div style="z-index:500; position:relative">
        <div>
            <div style="width:100%;background-color:rgba(255, 255, 255, 1)">
                <img style="width:100%;height:auto;max-width:700px" src="images/pgassuperapplogo-nobg_new.png" />
            </div>
            <br />
            <center>
                <div style="width:67%;align-items:center">

                    <h1>
                        Document Validator
                    </h1>
                    <p style="text-align:center">
                        Click on Scan then point the camera on the QR code of the document.
                    </p>
                    <div class="btn btn-primary btn-lg" @onclick="@(()=>ShowScanner("DataValidator",""))">
                        <i class="fa-solid fa-camera"></i><span> Scan</span>
                    </div>
                    <a class="btn btn-primary btn-lg m-2" href=""><i class="fa-regular fa-reply"></i> Back</a>
                </div>
            </center>
        </div>
    </div>
</div>
<QRScanner @ref="_qRScanner" ScanResult="QRResult" />

@code {
    string Event;
    string MenuClicked = "Scan";
    bool showoverlay = false;
    string overlaytext = "";
    double currentRecord = 0;
    double totalcount = 0;
    string qr = "";
    QRScanner _qRScanner;

    IEnumerable<string> EventName = new List<string> { "Governor's Cup Profiling", "Caraga Regional Athletic Meet", "Sample for QR" };
    List<(string storageId, string dataId)> StoredData = new List<(string, string)>();

    public async Task DownloadData()
    {
        var response = await Http.GetFromJsonAsync<ApiResponse>(Http.BaseAddress + $"api/ModuleBuilder/GetTableData?pagenumber={1}&pagesize={1}&formname={Event}");
        if (response != null)
        {
            totalcount = response.TotalCount;

            if (totalcount > 0)
            {
                overlaytext = $" out of {totalcount} Downloaded";
                showoverlay = true;
                var records = new List<JsonElement>();
                var counter = 1;
                var storagenumber = 1;
                for (int i = 1; i <= totalcount; i++)
                {
                    var responseJson = await Http.GetFromJsonAsync<List<JsonElement>>(Http.BaseAddress + $"api/ModuleBuilder/GetTableDataNormalized?pagenumber={i}&pagesize={1}&formname={Event}");
                    foreach (var record in responseJson)
                    {
                        var id = record.GetProperty("_id").GetString();
                        StoredData.Add(($"{Event}_{storagenumber}", id));
                        records.Add(record);
                        currentRecord = i;
                        StateHasChanged();
                    }
                    if (counter == 5 || i == totalcount)
                    {
                        storagenumber++;
                        await localStorage.RemoveItemAsync($"{Event}_{storagenumber}");
                        await localStorage.SetItemAsync($"{Event}_{storagenumber}", records);
                        records = new List<JsonElement>();
                        counter = 0;
                    }
                    counter++;
                }
                await localStorage.SetItemAsync($"{Event}_library_ref", StoredData);
                showoverlay = false;

            }
        }
    }
    private async void QRResult((string, string,string) result)
    {
        try
        {
             qr = result.Item1;
            var field = result.Item2;
            
            NotificationService.Notify(new NotificationMessage
                {
                    Style = "position: fixed; top: 35; left: 50%; transform: translateX(-50%);",
                    Severity = NotificationSeverity.Success,
                    Summary = "Notice",
                    Detail = "QR Successfully Scanned",
                    Duration = 4000
                });
            await _qRScanner.CloseAsync();

            await DialogService.OpenAsync<ScannedDataViewer>($"Scan Result",
               new Dictionary<string, object>() { { "value", qr } },
               new DialogOptions() { Width = "80%", Height = "80%", Resizable = true, Draggable = true });
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex.Message);
        }

    }
    private async void ShowScanner(string field,string source)
    {
        await _qRScanner.OpenScanner(field, source);
        // await Task.Delay(1000);

    }
}
