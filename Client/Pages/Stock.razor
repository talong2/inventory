@page "/stock"
@using PPDIS.Shared.Models
@inject IJSRuntime JS
@inject HttpClient Http
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject IJSRuntime JSRuntime


<style>
    .rz-dialog {
        background-color: #f5f5f5 !important;
        border-radius: 10px 10px 0 0 !important;
    }
    .rz-dialog-titlebar {
        background-color: #0605AB !important;
        border-radius: 10px 10px 0 0 !important;
        color: white !important;
    }

    .rz-dialog-title {
        border-radius: 10px 10px 0 0 !important;
    }

    .rz-dialog-content {
        padding: 15px;
    }
</style>

<section class="section dashboard">
    <div class="row g-4 font-name" style="align-items: flex-start">

        <!-- 📦 Stock Card Panel -->
        <div class="col-lg-9 col-xl-9 col-sm-12 d-flex">
            <RadzenCard Style="width:100%; height:100%; border-radius:10px;"
                        class="shadow-sm bg-white mb-4 p-0">
                <div class="d-flex flex-column h-100 main-card pb-3">

                    <!-- Title -->
                    <div class="dashboard-header header-style">
                        <h3 class="">Forms</h3>
                    </div>

                    <div class="dashboard-form-header">
                        <h3>Stock Card Overview</h3>
                        <button type="submit" class="btn px-4 py-2 shadow-sm" @onclick="ShowInlineDialog">
                            <i class="bi bi-file-earmark-plus-fill"></i> Add Form
                        </button>
                    </div>

                    @if (dataLoaded && FilteredEntries.Any())
                    {
                    var first = FilteredEntries.First();

                        <div class="form-details">
                            <div class="form-body">
                                <div class="form-body-header">
                                    <h2>PURCHASE REQUEST ID: @first.pr_number</h2>
                                    <small>Date: @first.pr_date</small>
                                </div>

                                <!-- STOCK TRANSACTIONS -->
                                <div class="form-body-container">
                                    <!-- Dropdown Title -->
                                    <div class="form-title @(showStockTransactions ? "form-title-open" : "")" @onclick="ToggleStockTransactions" style="cursor:pointer">
                                        <h5>Stock Transactions</h5>
                                        <i class="bi @(showStockTransactions ? "bi-caret-down-fill" : "bi-caret-right-fill")"></i>
                                    </div>

                                    @if (showStockTransactions)
                                    {
                                        <div class="form-table">
                                            <div class="table-responsive pb-5 mb-2" style="border-bottom: 1px solid #D9D9D9">
                                                <table class="table align-middle shadow-sm custome-table">
                                                    <thead class="table-primary text-center">
                                                        <tr class="table-font-tr">
                                                            <th>Date</th>
                                                            <th>Reference</th>
                                                            <th>Receipt Qty</th>
                                                            <th>Issue Qty</th>
                                                            <th>Office</th>
                                                            <th>Balance Qty</th>
                                                            <th>Days to Consume</th>
                                                            <th>Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var stockCard in FilteredEntries)
                                                        {
                                                            if (stockCard.entries != null)
                                                            {
                                                                foreach (var entry in stockCard.entries)
                                                                {
                                                                    <tr class="text-center">
                                                                        <td>@entry.date</td>
                                                                        <td>@entry.reference</td>
                                                                        <td>@entry.receiptQty</td>
                                                                        <td>@entry.issueQty</td>
                                                                        <td>@entry.office</td>
                                                                        <td>@entry.balanceQty</td>
                                                                        <td>@entry.daysToConsume</td>
                                                                        <td>
                                                                            <button class="btn btn-sm btn-primary me-1" title="Edit" @onclick="() => EditItemOverview(first)">
                                                                                ✏️ Edit
                                                                            </button>
                                                                            <button class="btn btn-sm btn-danger me-1" title="Delete" @onclick="() => DeleteEntry(entry)">
                                                                                🗑️ Delete
                                                                            </button>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            }
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <div class="form-body-container">
                                    <!-- Dropdown Title -->
                                    <div class="form-title @(showPurchaseRequest ? "form-title-open" : "")" @onclick="TogglePurchaseRequest" style="cursor:pointer">
                                        <h5>Purchase Request</h5>
                                        <i class="bi @(showPurchaseRequest ? "bi-caret-down-fill" : "bi-caret-right-fill")"></i>
                                    </div>

                                    <!-- Dropdown Content -->
                                    @if (showPurchaseRequest)
                                    {
                                        <div class="form-table">
                                            <!-- PURCHASE REQUEST SECTION -->
                                            <div class="table-responsive mb-2 pb-5">
                                                <table class="table align-middle shadow-sm custome-table">
                                                    <thead class="table-primary text-center">
                                                        <tr>
                                                            <th>#</th>
                                                            <th>Unit</th>
                                                            <th>Description</th>
                                                            <th>Quantity</th>
                                                            <th>Unit Cost</th>
                                                            <th>Total Cost</th>
                                                            <th>Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @{
                                                            int counter = 1;
                                                        }
                                                        @foreach (var entry in FilteredEntries)
                                                        {
                                                            foreach (var supply in entry.list_supplies_pr)
                                                            {
                                                                <tr class="text-center">
                                                                    <td>@counter</td>
                                                                    <td>@supply.unit</td>
                                                                    <td class="text-start" style="white-space: pre-wrap;">
                                                                        @supply.description
                                                                    </td>
                                                                    <td>@supply.quantity</td>
                                                                    <td>@supply.unitcost</td>
                                                                    <td>@supply.totalcost</td>
                                                                    <td>
                                                                        <div class="d-flex align-items-center justify-content-center purchase-button">
                                                                            <button class="btn btn-sm purchase-edit" @onclick="() => EditItemOverview(first)"><i class="bi bi-pen-fill"></i></button>
                                                                            <button class="btn btn-sm purchase-delete" @onclick="() => EditItemOverview(first)"><i class="bi bi-trash-fill"></i></button>
                                                                        </div>
                                                                    </td>
                                                                </tr>
                                                                counter++;
                                                            }
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                    }
                                </div>

                                <div class="form-body-container">
                                    <div class="form-title @(showQoutations ? "form-title-open" : "")" @onclick="ToggleQoutations" style="cursor:pointer">
                                        <h5>Quotations</h5>
                                        <i class="bi @(showQoutations ? "bi-caret-down-fill" : "bi-caret-right-fill")"></i>
                                    </div>

                                    @if (showQoutations)
                                    {
                                        <div class="form-table">
                                            <!-- QUOTATION SECTION -->
                                            <div class="table-responsive mb-2 pb-5">
                                                <table class="table align-middle shadow-sm custome-table">
                                                    <thead class="table-primary text-center">
                                                        <tr>
                                                            <th>#</th>
                                                            <th>Unit</th>
                                                            <th>Quantity</th>
                                                            <th>Description</th>
                                                            <th>Action</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @{
                                                            int quotationCounter = 1;
                                                        }
                                                        @foreach (var entry in FilteredEntries)
                                                        {
                                                            foreach (var supply in entry.list_supplies_qu)
                                                            {
                                                                <tr class="text-center">
                                                                    <td>@quotationCounter</td>
                                                                    <td>@supply.unit</td>
                                                                    <td>@supply.quantity</td>
                                                                    <td>@supply.description</td>
                                                                    <td>
                                                                        <div class="d-flex align-items-center justify-content-center purchase-button">
                                                                            <button class="btn btn-sm purchase-edit" @onclick="() => EditItemOverview(first)"><i class="bi bi-pen-fill"></i></button>
                                                                            <button class="btn btn-sm purchase-delete" @onclick="() => EditItemOverview(first)"><i class="bi bi-trash-fill"></i></button>
                                                                        </div>
                                                                    </td>
                                                                </tr>
                                                                quotationCounter++;
                                                            }
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>

                                    }
                                </div>
                                <div class="form-body-container">
                                    <div class="form-title @(showPurchaseOrder ? "form-title-open" : "")" @onclick="TogglePurchaseOrder" style="cursor:pointer">
                                        <h5>Purchase Order</h5>
                                        <i class="bi @(showPurchaseOrder ? "bi-caret-down-fill" : "bi-caret-right-fill")"></i>
                                    </div>

                                    @if (showPurchaseOrder)
                                    {
                                        <div class="form-table">
                                            <!-- PURCHASE ORDER SECTION -->
                                            @foreach (var entry in FilteredEntries)
                                            {
                                                int poGroupCounter = 1;

                                                foreach (var po in entry.list_supplies_po)
                                                {
                                                    <div class="bg-white rounded-4 shadow-sm purchase-group">
                                                        <div class="d-flex justify-content-between align-items-center mb-1 purchase-group-header">
                                                            <h5>PURCHASE ORDER GROUP @poGroupCounter</h5>
                                                            <div class="d-flex align-items-center justify-content-between purchase-button">
                                                                <button class="btn btn-sm purchase-edit" @onclick="() => EditItemOverview(first)"><i class="bi bi-pen-fill"></i></button>
                                                                <button class="btn btn-sm purchase-delete" @onclick="() => EditItemOverview(first)"><i class="bi bi-trash-fill"></i></button>
                                                            </div>
                                                        </div>

                                                        <!-- PO Info -->
                                                        <div class="row g-3 mb-3 purchase-group-details">
                                                            <div class="col-md-4">
                                                                <strong>Supplier:</strong><br />
                                                                <span>@po.Supplier</span>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <strong>Address:</strong><br />
                                                                <span>@po.Address</span>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <strong>TIN Number:</strong><br />
                                                                <span>@po.TIN</span>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <strong>PO Number:</strong><br />
                                                                <span>@po.PONumber</span>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <strong>PO Date:</strong><br />
                                                                <span>@po.PODate</span>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <strong>Procurement Mode:</strong><br />
                                                                <span>@po.ProcurementMode</span>
                                                            </div>
                                                        </div>

                                                        <!-- PO Supplies Table -->
                                                        <div class="table-responsive">
                                                            <table class="table align-middle custome-table">
                                                                <thead class="table-primary text-center">
                                                                    <tr>
                                                                        <th>#</th>
                                                                        <th>Unit</th>
                                                                        <th>Description</th>
                                                                        <th>Quantity</th>
                                                                        <th>Unit Cost</th>
                                                                        <th>Total Cost</th>
                                                                        <th>Action</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    @for (int i = 0; i < po.Supplies.Count; i++)
                                                                    {
                                                                        var supply = po.Supplies[i];
                                                                        <tr class="text-center">
                                                                            <td>@(i + 1)</td>
                                                                            <td>@supply.unit</td>
                                                                            <td>@supply.description</td>
                                                                            <td>@supply.quantity</td>
                                                                            <td>@supply.unitcost</td>
                                                                            <td>@supply.totalcost</td>
                                                                            <td>
                                                                                <div class="d-flex align-items-center justify-content-center purchase-button">
                                                                                    <button class="btn btn-sm purchase-edit" @onclick="() => EditItemOverview(first)"><i class="bi bi-pen-fill"></i></button>
                                                                                    <button class="btn btn-sm purchase-delete" @onclick="() => EditItemOverview(first)"><i class="bi bi-trash-fill"></i></button>
                                                                                </div>
                                                                            </td>
                                                                        </tr>
                                                                    }
                                                                </tbody>
                                                            </table>
                                                        </div>


                                                    </div>
                                                    poGroupCounter++;
                                                }
                                            }
                                        </div>
                                    }
                                </div>

                                <div class="form-body-container">
                                    <div class="form-title @(showInspections ? "form-title-open" : "")" @onclick="ToggleInspections" style="cursor:pointer">
                                        <h5>Inspection Group</h5>
                                        <i class="bi @(showInspections ? "bi-caret-down-fill" : "bi-caret-right-fill")"></i>
                                    </div>

                                    @if (showInspections)
                                    {
                                        <div class="form-table">
                                            <!-- INSPECTION SECTION -->
                                            @foreach (var entry in FilteredEntries)
                                            {
                                                int insGroupCounter = 1;

                                                foreach (var insGroup in entry.list_supplies_ins)
                                                {
                                                    <div class="bg-white rounded-4 shadow-sm purchase-group">
                                                        <div class="d-flex justify-content-between align-items-center mb-1 purchase-group-header">
                                                            <h5>INSPECTION GROUP @insGroupCounter</h5>
                                                            <div class="d-flex align-items-center justify-content-between purchase-button">
                                                                <button class="btn btn-sm purchase-edit" @onclick="() => EditItemOverview(first)"><i class="bi bi-pen-fill"></i></button>
                                                                <button class="btn btn-sm purchase-delete" @onclick="() => EditItemOverview(first)"><i class="bi bi-trash-fill"></i></button>
                                                            </div>
                                                        </div>

                                                        <!-- Inspection Info -->
                                                        <div class="row g-3 mb-3 purchase-group-details">
                                                            <div class="col-md-6">
                                                                <strong>Inspection Number:</strong><br />
                                                                <span>@insGroup.InspectionNumber</span>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <strong>Inspection Date:</strong><br />
                                                                <span>@insGroup.InspectionDate</span>
                                                            </div>
                                                        </div>

                                                        <!-- Inspection Items Table -->
                                                        <div class="table-responsive">
                                                            <table class="table custome-table align-middle">
                                                                <thead class="text-center custom-table">
                                                                    <tr>
                                                                        <th>#</th>
                                                                        <th>Unit</th>
                                                                        <th>Description</th>
                                                                        <th>Quantity</th>
                                                                        <th>Unit Cost</th>
                                                                        <th>Total Cost</th>
                                                                        <th>Action</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    @for (int i = 0; i < insGroup.Ins.Count; i++)
                                                                    {
                                                                        var supply = insGroup.Ins[i];
                                                                        <tr class="text-center">
                                                                            <td>@(i + 1)</td>
                                                                            <td>@supply.unit</td>
                                                                            <td>@supply.description</td>
                                                                            <td>@supply.quantity</td>
                                                                            <td>@supply.unitcost</td>
                                                                            <td>@supply.totalcost</td>
                                                                            <td>
                                                                                <div class="d-flex align-items-center justify-content-center purchase-button">
                                                                                    <button class="btn btn-sm purchase-edit" @onclick="() => EditItemOverview(first)"><i class="bi bi-pen-fill"></i></button>
                                                                                    <button class="btn btn-sm purchase-delete" @onclick="() => EditItemOverview(first)"><i class="bi bi-trash-fill"></i></button>
                                                                                </div>
                                                                            </td>
                                                                        </tr>
                                                                    }
                                                                </tbody>
                                                            </table>
                                                        </div>
                                                    </div>
                                                    insGroupCounter++;
                                                }
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>


                        <!--
                            <div class="ms-auto">
                                <button class="btn btn-sm btn-primary d-flex align-items-center" @onclick="() => EditItemOverview(first)">
                                    ✏️ <span class="ms-1">Edit Quotation</span>
                                </button>
                            </div>
                        -->

                    }
                    else if (dataLoaded && !FilteredEntries.Any())
                    {

                    <div class="form-details mb-4">
                        <div class="form-date-none">
                            <h6>No Form Selected</h6>
                        </div>
                        <div class="form-body-none">
                            <i class="bi bi-file-earmark-plus-fill"></i>
                        </div>
                    </div>
                    }
                </div>
            </RadzenCard>
        </div>

        <!-- 🔍 Left Panel -->
        <div class="col-lg-3 col-xl-3 col-sm-12 d-flex">
            <RadzenCard Style="width:100%; height: 100%; border-radius:10px;"
                        class="shadow-sm bg-white mb-4 p-0">
                <div class="d-flex flex-column h-100 main-card pb-3">
                    <div class="d-flex justify-content-between align-items-center filter-tracking-header mb-0">
                        <div class="flex-grow-1 filter-tracking-name">
                            <h6 class="fw-bold m-0">Filter tracking-Year</h6>
                        </div>
                        <button class="btn shadow-sm filter-tracking-button d-flex align-items-center gap-1 px-2"
                                title="Refresh Data"
                                @onclick="RefreshData"
                                disabled="@isRefreshing">
                            <i class="@($"fas fa-rotate-right {(isRefreshing ? "fa-spin" : "")}")"></i>
                            <span class="fw-bold fs-5"><i class="bi bi-arrow-clockwise"></i></span>
                        </button>
                    </div>
                    <div class="input-group mb-2 id-search">
                        <input type="text" class="form-control"
                               placeholder="Search tracking or Year..."
                               @bind="searchFilter"
                               @bind:event="oninput"/>
                        <button><i class="bi bi-search"></i></button>
                    </div>
                    <div class="flex-grow-1 overflow-auto">
                        <ul class="list-group list-group-flush">
                            <Virtualize Items="FilteredtrackingYearPairs" Context="pair" ItemSize="60">
                                <ItemContent>
                                    <li class="list-group-item list-group-item-action rounded-3"
                                        style="cursor: pointer;"
                                        @onclick="@(() => OntrackingYearSelected(pair.tracking, pair.Year))">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div class="d-flex flex-column filter-tracking-year">
                                                <span class="fw-semibold text-dark">@pair.tracking @pair.Year </span>
                                                <small class="text-muted">Click to load entries</small>
                                            </div>
                                            <i class="bi bi-file-post fs-3" style="color: #0605AB;"></i>
                                        </div>
                                    </li>
                                </ItemContent>
                            </Virtualize>
                        </ul>
                        @if (!FilteredtrackingYearPairs.Any())
                        {
                        <div class="text-muted text-center mt-4">❗ No matching tracking-year found.</div>
                        }
                    </div>
                </div>
            </RadzenCard>
        </div>

    </div>
</section>


@code {
    private List<StockCardData> stock_list = new();
    private List<StockCardData> FilteredEntries = new();
    [Parameter] public EventCallback OnFormSubmitted { get; set; }
    private bool isLoading = false;
    private bool hasError = false;
    private bool dataLoaded = false;
    private bool isRefreshing = false;

    private string selectedtracking = "";
    private string selectedYear = "";
    private string searchFilter = "";

    DateTime? value = DateTime.Now;

    bool showStockTransactions = false;
    bool showPurchaseRequest = false;
    bool showQoutations = false;
    bool showPurchaseOrder = true;
    bool showInspections = false;

    void ToggleInspections()
    {
        showInspections = !showInspections;
    }

    void TogglePurchaseOrder()
    {
        showPurchaseOrder = !showPurchaseOrder;
    }

    void ToggleQoutations()
    {
        showQoutations = !showQoutations;
    }

    void ToggleStockTransactions()
    {
        showStockTransactions = !showStockTransactions;
    }

    void TogglePurchaseRequest()
    {
        showPurchaseRequest = !showPurchaseRequest;
    }

    protected override async Task OnInitializedAsync()
    {
        stock_list = await Http.GetFromJsonAsync<List<StockCardData>>("api/Task/ViewStock") ?? new();
        await LoadReport();
    }

    private async Task RefreshData()
    {
        isRefreshing = true;
        stock_list = await Http.GetFromJsonAsync<List<StockCardData>>("api/Task/ViewStock") ?? new();
        await LoadReport();
        isRefreshing = false;
    }

    private async Task OntrackingYearSelected(string tracking, string year)
    {
        selectedtracking = tracking;
        selectedYear = year;
        await LoadReport();
    }

    private async Task LoadReport()
    {
        isLoading = true;
        hasError = false;
        dataLoaded = false;

        try
        {
            ApplyFilters();
            dataLoaded = true;
        }
        catch (Exception ex)
        {
            hasError = true;
            Console.WriteLine($"Exception: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        FilteredEntries = stock_list
            .Where(x => x.tracking == selectedtracking)
            .ToList();
    }

    private List<trackingYearPair> FilteredtrackingYearPairs =>
        stock_list
            .Where(x =>
                string.IsNullOrWhiteSpace(searchFilter) ||
                x.tracking.Contains(searchFilter, StringComparison.OrdinalIgnoreCase) 
            )
            .Select(x => new trackingYearPair { tracking = x.tracking })
            .DistinctBy(x => new { x.tracking, x.Year })
            .OrderByDescending(x => x.Year)
            .ThenByDescending(x => x.tracking)
            .ToList();


    private async Task EditItemOverview(StockCardData stock)
    {
        await DialogService.OpenAsync<SaveStockForm>("Edit Stock Card",
            new Dictionary<string, object>
            {
            { "stockCard", stock },
            { "OnFormSubmitted", EventCallback.Factory.Create(this, onSaveSuccess) }
            },
            new DialogOptions { Width = "1481px", Height = "732px" });
    }


    private async Task onSaveSuccess()
    {
        await OnInitializedAsync();
        StateHasChanged();
    }


    private async Task PrintSingleEntry(StockCardData stockCard, StockClass entry)
    {
        if (entry == null)
        {
            Console.WriteLine("No entry selected.");
            return;
        }

        await JS.InvokeVoidAsync("window.printStockCard", new
        {
            item = stockCard.item,
            descript = stockCard.descript,
            unit = stockCard.unit,
            stock = stockCard.stock,
            reorder = stockCard.reorder,
            entries = new[]
            {
                new
                {
                    date = entry.date,
                    reference = entry.reference,
                    receiptQty = entry.receiptQty,
                    issueQty = entry.issueQty,
                    office = entry.office,
                    balanceQty = entry.balanceQty,
                    daysToConsume = entry.daysToConsume
                }
            }
        });
    }

    // Placeholder methods
    private void EditEntry(StockClass entry)
    {
        Console.WriteLine("Edit clicked for: " + entry.reference);
    }

    private void DeleteEntry(StockClass entry)
    {
    }


    private async Task PrintPr(StockCardData stockCard)
    {
        if (stockCard == null || stockCard.list_supplies_pr == null || !stockCard.list_supplies_pr.Any())
            return;

        await JS.InvokeVoidAsync("window.printPurchaseRequestFromStockCard", new
        {
            pr_number = stockCard.pr_number,
            pr_date = stockCard.pr_date,

            list_supplies_pr = stockCard.list_supplies_pr.Select(s => new
            {
                unit = s.unit,
                description = s.description,
                quantity = s.quantity,
                unitcost = s.unitcost,
                totalcost = s.totalcost
            })
        });
    }


    private async Task PrintFirstStockCard()
    {
        var report_stocks = await Http.GetFromJsonAsync<List<StockCardData>>("api/Task/ViewStock");

        // Assuming you want the first stock card's Id from the list
        var firstStock = report_stocks?.FirstOrDefault();

        var query = $"?id={Uri.EscapeDataString(firstStock?.Id ?? "")}";

        await JS.InvokeVoidAsync("open", $"/api/Report/StockReport{query}", "_blank");
    }


    private async Task PrintQu(StockCardData stockCard)
    {
        if (stockCard == null || stockCard.list_supplies_qu == null || stockCard.list_supplies_qu.Count == 0)
            return;

        await JS.InvokeVoidAsync("printQuotation", new
        {
            item = stockCard.item,
            descript = stockCard.descript,
            unit = stockCard.unit,
            qu_date = stockCard.date.ToString("yyyy-MM-dd"),
            qu_number = stockCard.pr_number,
            qu_canvass_no = stockCard.canvass_no,
            list_supplies_qu = stockCard.list_supplies_qu.Select(q => new
            {
                q.unit,
                q.description,
                q.quantity,
                q.unitcost,
                q.totalcost
            })
        });
    }


    private async Task PrintPoById(StockCardData stockCard, string poGroupId)
    {
        if (stockCard == null || string.IsNullOrEmpty(poGroupId))
            return;

        var group = stockCard.list_supplies_po.FirstOrDefault(p => p.Id == poGroupId);
        if (group == null)
            return;

        await JS.InvokeVoidAsync("printSinglePurchaseOrder", new
        {
            supplier = group.Supplier,
            address = group.Address,
            tin = group.TIN,
            po_number = group.PONumber,
            po_date = group.PODate,
            procurement_mode = group.ProcurementMode,
            supplies = group.Supplies.Select(s => new
            {
                s.unit,
                s.description,
                s.quantity,
                s.unitcost,
                s.totalcost
            }).ToList()
        });
    }

    private async Task PrintSuppliesEachPage(List<SuppliesClass> supplies)
    {
        if (supplies == null || supplies.Count == 0)
            return;

        await JS.InvokeVoidAsync("printEachSupplyItemPerPage", supplies.Select(s => new
        {
            s.description,
            s.quantity,
            s.unitcost,
            s.totalcost
        }).ToList());
    }


    private async Task PrintAllPo(StockCardData stockCard)
    {
        if (stockCard == null || stockCard.list_supplies_po == null || stockCard.list_supplies_po.Count == 0)
            return;

        await JS.InvokeVoidAsync("printAllPoIndividuallyPerPage", new
        {
            list_supplies_po = stockCard.list_supplies_po.Select(group => new
            {
                supplier = group.Supplier,
                address = group.Address,
                tin = group.TIN,
                po_number = group.PONumber,
                po_date = group.PODate,
                procurement_mode = group.ProcurementMode,
                supplies = group.Supplies.Select(s => new
                {
                    s.unit,
                    s.description,
                    s.quantity,
                    s.unitcost,
                    s.totalcost
                }).ToList()
            }).ToList()
        });
    }

    private async Task PrintIns(StockCardData stockCard, InsSuppliesClass supply)
    {
        if (supply == null) return;

        var ins = stockCard.list_supplies_ins.FirstOrDefault(g => g.Ins.Contains(supply));
        if (ins == null) return;

        await JS.InvokeVoidAsync("window.printStockCardIns", new
        {
            item = stockCard.item,
            descript = stockCard.descript,
            unit = stockCard.unit,
            inspectionNumber = ins.InspectionNumber,
            inspectionDate = ins.InspectionDate,
            supply = new
            {
                unit = supply.unit,
                description = supply.description,
                quantity = supply.quantity,
                unitcost = supply.unitcost,
                totalcost = supply.totalcost
            }
        });
    }


    private async Task PrintPr(StockCardData stockCard, SuppliesClass pr)
    {
    }

    private void EditPr(PrSuppliesClass supply)
    {
        // Implement logic to edit PR item
    }

    private void DeletePr(PrSuppliesClass supply)
    {
        // Implement logic to delete PR item
    }


    private void EditPo(SuppliesClass po)
    {
        // Show edit modal or set selectedPo = po
    }

    private void DeletePo(SuppliesClass po)
    {
        // Remove item from list, confirm deletion, etc.
    }


    // Placeholder methods Qu
    private void EditQu(QuSuppliesClass qu)
    {
    }

    private void DeleteQu(QuSuppliesClass qu)
    {
    }


    // Placeholder methods Qu
    private void EditIns(InsSuppliesClass ins)
    {
    }

    private void DeleteIns(InsSuppliesClass ins)
    {
    }


    public class trackingYearPair
    {
        public string tracking { get; set; }
        public string Year { get; set; }
    }

    async Task ShowInlineDialog()
    {
        var newStock = new StockCardData(); // 👈 dapat clean / empty
        Console.WriteLine($"[Add] StockCard Id before dialog: {newStock.Id}");

        await DialogService.OpenAsync<SaveStockForm>("",
            new Dictionary<string, object>
            {
            { "stockCard", newStock }, // 👈 empty
            { "OnFormSubmitted", EventCallback.Factory.Create(this, OnFormSubmitted) }
            },
            new DialogOptions()
            {
                Resizable = true,
                Draggable = true,
                Resize = OnResize,
                Drag = OnDrag,
                Width = Settings != null ? Settings.Width : "1420px",
                Height = Settings != null ? Settings.Height : "680px",
                Left = Settings != null ? Settings.Left : null,
                Top = Settings != null ? Settings.Top : null
            });

        await RefreshData();
    }


    /*
    async Task ShowInlineDialog()
    {
        await DialogService.OpenAsync<SaveStockForm>("",
            new Dictionary<string, object>()
            {
                { "OnFormSubmitted", EventCallback.Factory.Create(this, OnFormSubmitted) }
            },
            new DialogOptions()
            {
                Resizable = true,
                Draggable = true,
                Resize = OnResize,
                Drag = OnDrag,
                Width = Settings != null ? Settings.Width : "1481px",
                Height = Settings != null ? Settings.Height : "732px",
                Left = Settings != null ? Settings.Left : null,
                Top = Settings != null ? Settings.Top : null
            });
        
        await RefreshData();
    }
    */
    
    void OnDrag(System.Drawing.Point point)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog drag. Left:{point.X}, Top:{point.Y}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Left = $"{point.X}px";
        Settings.Top = $"{point.Y}px";

        InvokeAsync(SaveStateAsync);
    }

    void OnResize(System.Drawing.Size size)
    {
        JSRuntime.InvokeVoidAsync("eval", $"console.log('Dialog resize. Width:{size.Width}, Height:{size.Height}')");

        if (Settings == null)
        {
            Settings = new DialogSettings();
        }

        Settings.Width = $"{size.Width}px";
        Settings.Height = $"{size.Height}px";

        InvokeAsync(SaveStateAsync);
    }

    DialogSettings _settings;

    public DialogSettings Settings
    {
        get { return _settings; }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }


    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;
    }

    public class DialogSettings
    {
        public string Left { get; set; }
        public string Top { get; set; }
        public string Width { get; set; }
        public string Height { get; set; }
    }

}