@page "/stockcard"
@using PPDIS.Shared.Models
@inject IJSRuntime JS
@inject HttpClient Http





<!-- 🔼 Stock Form Section -->
<div class="col-lg-12 col-xl-12 col-sm-12 d-flex mb-4">
    <div class="card p-4 w-100 shadow-sm border-0 bg-light rounded-4 mb-4" style="min-height: 300px;">
        <StockForm />
    </div>
</div>

<section class="section dashboard">
    <div class="row g-4"> <!-- No alignment class -->

        <!-- 🔍 Left Panel -->
        <div class="col-lg-4 col-xl-4 col-sm-12 d-flex">
            <div class="card w-100 p-4 shadow-sm border-0 rounded-4 bg-white mb-4" style="height: 700px;">
                <div class="d-flex flex-column h-100">
                    <!-- Header -->
                    <div class="mb-3 text-center">
                        <h5 class="fw-bold text-primary">📅 Filter Month-Year</h5>
                    </div>

                    <!-- Search -->
                    <div class="input-group mb-3">
                        <span class="input-group-text bg-light border-0">🔍</span>
                        <input type="text"
                               class="form-control border-0 shadow-sm"
                               placeholder="Search Month or Year..."
                               @bind="searchFilter"
                               @bind:event="oninput" />
                    </div>

                    <!-- Scrollable List -->
                    <div class="flex-grow-1 overflow-auto">
                        <ul class="list-group list-group-flush">
                            <Virtualize Items="FilteredMonthYearPairs" Context="pair" ItemSize="60">
                                <ItemContent>
                                    <li class="list-group-item list-group-item-action rounded-3 my-1"
                                        style="cursor: pointer;"
                                        @onclick="@(() => OnMonthYearSelected(pair.Month, pair.Year))">
                                        <div class="d-flex flex-column">
                                            <span class="fw-semibold text-dark">@pair.Month @pair.Year</span>
                                            <small class="text-muted">Click to load entries</small>
                                        </div>
                                    </li>
                                </ItemContent>
                            </Virtualize>
                        </ul>
                        @if (!FilteredMonthYearPairs.Any())
                        {
                        <div class="text-muted text-center mt-4">❗ No matching month-year found.</div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- 📦 Right Panel -->
        <div class="col-lg-8 col-xl-8 col-sm-12 d-flex">
            <div class="card w-100 p-4 shadow-sm border-0 rounded-4 bg-white mb-4" style="height: 700px;">
                <div class="d-flex flex-column h-100">
                    <div class="text-center mb-4">
                        <h4 class="text-dark fw-bold">📦 Stock Card Overview</h4>
                    </div>

                    <div class="card-body p-0 flex-grow-1 overflow-auto">
                        @if (dataLoaded && FilteredEntries.Any())
                        {
                        <div class="mb-3 text-end">
                            <button class="btn btn-outline-success btn-sm shadow-sm" @onclick="PrintFirstStockCard">
                                🖨️ Print Stock Card
                            </button>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-hover table-bordered table-striped align-middle">
                                <thead class="table-primary text-center">
                                <tr>
                                    <th>Date</th>
                                    <th>Reference</th>
                                    <th>Receipt Qty</th>
                                    <th>Issue Qty</th>
                                    <th>Office</th>
                                    <th>Balance Qty</th>
                                    <th>No. of Days to Consume</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var entrys in FilteredEntries)
                                {
                                foreach (var entry in entrys.entries)
                                {
                                <tr class="text-center">
                                    <td>@entry.date</td>
                                    <td>@entry.reference</td>
                                    <td>@entry.receiptQty</td>
                                    <td>@entry.issueQty</td>
                                    <td>@entry.office</td>
                                    <td>@entry.balanceQty</td>
                                    <td>@entry.daysToConsume</td>
                                </tr>
                                }
                                }
                                </tbody>
                            </table>
                        </div>
                        }
                        else if (dataLoaded && !FilteredEntries.Any())
                        {
                        <div class="alert alert-warning text-center mt-4 rounded-3 shadow-sm">
                            ⚠️ No matching stock entries found.
                        </div>
                        }
                    </div>
                </div>
            </div>
        </div>

    </div>
</section>





@code {
    private List<StockCardData> stock_list = new();
    private List<StockCardData> FilteredEntries = new();

    private bool isLoading = false;
    private bool hasError = false;
    private bool dataLoaded = false;

    private string selectedMonth = "";
    private string selectedYear = "";
    private string searchFilter = "";

    // Load data initially
    protected override async Task OnInitializedAsync()
    {
        stock_list = await Http.GetFromJsonAsync<List<StockCardData>>("api/Task/ViewStock") ?? new();
    }

    // This is the async handler for month-year selection
    private async Task OnMonthYearSelected(string month, string year)
    {
        selectedMonth = month;
        selectedYear = year;
        await LoadReport();
    }   

    // Filter logic applied to selected values
    private async Task LoadReport()
    {
        isLoading = true;
        hasError = false;
        dataLoaded = false;

        try
        {
            ApplyFilters();
            dataLoaded = true;
        }
        catch (Exception ex)
        {
            hasError = true;
            Console.WriteLine($"Exception: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    // Filters the loaded stock list for selected month/year
    private void ApplyFilters()
    {
        FilteredEntries = stock_list
            .Where(x => x.month == selectedMonth && x.year.ToString() == selectedYear)
            .ToList();
    }

    private int ParseYear(string yearStr)
    {
        return int.TryParse(yearStr, out var y) ? y : 0;
    }


    private List<MonthYearPair> FilteredMonthYearPairs =>
        stock_list
            .Where(x =>
                string.IsNullOrWhiteSpace(searchFilter) ||
                x.month.Contains(searchFilter, StringComparison.OrdinalIgnoreCase) ||
                x.year.ToString().Contains(searchFilter)
            )
            .Select(x => new MonthYearPair { Month = x.month, Year = x.year.ToString() })
            .DistinctBy(x => new { x.Month, x.Year }) // use DistinctBy from System.Linq
            .OrderByDescending(x => x.Year)
            .ThenByDescending(x => x.Month)
            .ToList();

    






    // JS Interop to print
    private async Task PrintFirstStockCard()
    {
        if (FilteredEntries == null || !FilteredEntries.Any())
        {
            Console.WriteLine("No stock data found.");
            return;
        }

        var firstStock = FilteredEntries.First();

        if (firstStock.entries == null || !firstStock.entries.Any())
        {
            Console.WriteLine("No entries found in first stock card.");
            return;
        }

        await JS.InvokeVoidAsync("printStockCard", new
        {
            entries = firstStock.entries.Select(e => new
            {
                date = e.date,
                reference = e.reference,
                receiptQty = e.receiptQty,
                issueQty = e.issueQty,
                office = e.office,
                balanceQty = e.balanceQty,
                daysToConsume = e.daysToConsume
            })
        });
    }
    
    
    public class MonthYearPair
    {
        public string Month { get; set; }
        public string Year { get; set; }
    }

}
